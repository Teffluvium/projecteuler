/*
 * Problem 2 from ProjectEuler.net
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 * 
 *        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * Find the sum of all the even-valued terms in the sequence which do not exceed one million.
 * 
 * This algorithm uses a closed form solution for the nth term of the Fibonacci sequence. 
 */
 
#include <iostream>
#include <cmath>

unsigned long fibonacci(int n);

using namespace std;

int main()
{
    unsigned long Fn = 0;
    int           n  = 2, sum = 0;
    
    do
    {
        if ((Fn % 2) == 0)
        {
            // Only sum even terms
            sum += Fn;
        }
        
        n++;
        Fn = fibonacci(n);
    } while ((Fn < 1000000));
    
    cout << "The sum of the even terms of the Fibonacci ";
    cout << "sequence that are less than 1 million is " << sum << endl;
    
    return 0;
}


unsigned long fibonacci(int n)
{
    const long double rt5    = sqrt(5);
    long double       Fn     = 0;
    long              Fn_int = 0;
    
    Fn =  pow(1.0 + rt5, n);
    Fn -= pow(1.0 - rt5, n);
    Fn /= ( pow(2.0, n) * rt5 );
    
    Fn_int = static_cast<unsigned long> (Fn);
    
    return Fn_int;
}
